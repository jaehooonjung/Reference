#include<stdio.h>
#include<stdlib.h>
#include<Windows.h>
#include<string.h>
#define MAX 50
#define NAME_LENGTH 25
#define CLASS_MAX 3

typedef struct student
{
	char Name[NAME_LENGTH];
	int Age;
	int Class;
	int Number;
	char Gender[10];
}Student;

void SetStudent(Student *St, int*StudentCount);
void ShowStudent(Student *St);
void ShowStudent_Class(Student*St,int *class_num);
void search_Student(Student*St, char *search_name);
void StudentErase(Student*St, int*StudentCount);


void main()
{
	Student* Student_List[MAX];
	int select;
	int class_num = 1;
	int StudentCount = 0;
	char search_name[NAME_LENGTH];


	while (1)
	{
		system("cls");
		printf("=====학생관리프로그램======(총 인원 : %d)\n", StudentCount);
		printf("1. 학생 등록\n");
		printf("2. 학생 목록(번호순)\n");
		printf("3. 학생 목록(학년순)\n");
		printf("4. 학년 검색\n");
		printf("5. 학생 검색\n");
		printf("6. 마지막 학생 삭제\n");
		printf("7. 학생 전체 삭제\n");
		printf("8. 종료\n");
		printf("입력 : ");
		scanf("%d", &select);
		system("cls");
		switch (select)
		{
		case 1:
			if (StudentCount + 1 >= MAX)
			{
				printf("학생정원(50명)이 모두 찼습니다.\n");
				break;
			}
			Student_List[StudentCount] = (Student*)malloc(sizeof(Student));
			SetStudent(Student_List[StudentCount],&StudentCount);
			break;
		case 2:
			for (int i = 0; i < StudentCount; i++)
			ShowStudent(Student_List[i]);
			break;
		case 3:
			for (class_num ; class_num <= CLASS_MAX; class_num++)
			{
				printf("┌───────  %d 학년───────┐\n",class_num);
				for (int i = 0; i < StudentCount; i++)
					ShowStudent_Class(Student_List[i],&class_num);
				printf("└───────────────────────┘\n");
			}
			class_num = 1;
			break;
		case 4: 
			printf("검색할 학년 입력 (1 ~ %d) : ", CLASS_MAX);
			scanf("%d", &class_num);
			printf("┌───────  %d 학년───────┐\n", class_num);
			for (int i = 0; i < StudentCount; i++)
			ShowStudent_Class(Student_List[i], &class_num);
			printf("└───────────────────────┘\n");
			break;
		case 5: 
			printf("검색할 이름 입력 : ");
			scanf("%s", search_name);
			for (int i = 0; i < StudentCount; i++)
				search_Student(Student_List[i], search_name);
			break;
		case 6://마지막 학생 삭제
			StudentErase(Student_List[(StudentCount-1)], &StudentCount);
			break;
		case 7: // 전체 삭제
			for (int i = 0; i < StudentCount; i++)
				StudentErase(Student_List[i], &StudentCount);
			StudentCount = NULL;
			break;
		case 8:
			for (int i = 0; i < StudentCount; i++)
			{
				printf("%s학생 동적할당 해제 완료\n", Student_List[i]->Name);
				free(Student_List[i]);
			}
			return;
		}
		system("pause");
	}
}

void SetStudent(Student* St,int *StudentCount)
{
	St->Number = ++*StudentCount;
	printf("======%d번 학생======\n", St->Number);
	printf("이름 입력 : ");
	scanf("%s", St->Name);
	printf("나이 입력 : ");
	scanf("%d", &St->Age);
	printf("성별 입력 : ");
	scanf("%s", St->Gender);
	printf("학년 입력 (%d이 최고학년 입니다.) : ", CLASS_MAX);
	scanf("%d", &St->Class);
	while (St->Class > CLASS_MAX || St->Class<=0)
	{
		printf("학년 입력 (%d이 최고학년 입니다.) : ", CLASS_MAX);
		scanf("%d", &St->Class);
	}
}
void ShowStudent(Student *St)
{
	printf("======%s학생(%d번)======\n", St->Name, St->Number);
	printf("나이 : %d,  성별 : %s,  학년 : %d\n", St->Age, St->Gender, St->Class);
	printf("======================\n");
}

void ShowStudent_Class(Student*St, int *class_num)
{
	if (St->Class == *class_num)
		ShowStudent(St);
}

void search_Student(Student*St, char*search_name)
{
	if (strcmp(St->Name,search_name) == 0 )
		ShowStudent(St);
}

void StudentErase(Student*St, int*StudentCount)
{
	sprintf(St->Name ,"%s",NULL);
	St->Age = NULL;
	sprintf(St->Gender, "%s", NULL);
	St->Class = NULL;
	--*StudentCount;
}


