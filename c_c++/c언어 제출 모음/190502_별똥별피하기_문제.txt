#include <stdio.h>
#include <Windows.h>
#include <conio.h>
#include <time.h>

#define WIDTH 13
#define HEIGHT 20
#define Y 0
#define X 1
#define LEFT 75
#define RIGHT 77
#define WALL 1
#define CHARACTER 2
#define SKY 3
#define SHOOTINGSTAR 4
#define TRUE 1
#define FALSE 0
#define ALIVE 1
#define DEAD 0
#define CHARACTER_STATUS 2
#define EASY 1
#define NOMAL 2
#define HARD 3
#define HELL 4

void Init(int map[][WIDTH], int character[])
{
	int width = (WIDTH * 2) + 1;
	int height = HEIGHT + 2;
	char buf[256];
	sprintf(buf, "mode con: lines=%d cols=%d", height, width);
	system(buf);
	for (int y = 0; y < HEIGHT; y++)
	{
		for (int x = 0; x < WIDTH; x++)
		{
			if (map[y][x] == CHARACTER)
			{
				character[Y] = y;
				character[X] = x;
				character[CHARACTER_STATUS] = ALIVE;
			}
			else if (map[y][x] == SHOOTINGSTAR)
				map[y][x] = NULL;
		}
	}
}
void MapDraw(int map[][WIDTH], int score[])
{
	for (int y = 0; y < HEIGHT; y++)
	{
		for (int x = 0; x < WIDTH; x++)
		{
			if (map[y][x] == CHARACTER)
				printf("♥");
			else if (map[y][x] == WALL)
				printf("▩");
			else if (map[y][x] == SHOOTINGSTAR)
				printf("★");
			else
				printf("  ");
		}
		printf("\n");
	}
	printf("현재 점수 : %d", score[0]);
}
void Move(int map[][WIDTH], int character[])
{
	char ch;
	ch = getch();
	map[character[Y]][character[X]] = NULL;
	switch (ch)
	{
	case LEFT:
		if (map[character[Y]][character[X] - 1] != WALL)
			character[X]--;
		break;
	case RIGHT:
		if (map[character[Y]][character[X] + 1] != WALL)
			character[X]++;
		break;
	}
	map[character[Y]][character[X]] = CHARACTER;

}

void ShootingStarMaker(int map[][WIDTH], int difficulty[]) //유성 랜덤 설정
{
	int shootingstar_creation;
	for (int x = 1; x < WIDTH - 1; x++)
	{

		switch (difficulty[0])
		{
		case 1:
			shootingstar_creation = (rand() % 50);
			if (shootingstar_creation == TRUE)
			{
				map[0][x] = SHOOTINGSTAR;
			}
			break;
		case 2:
			shootingstar_creation = (rand() % 40);
			if (shootingstar_creation == TRUE)
			{
				map[0][x] = SHOOTINGSTAR;
			}

			break;
		case 3:
			shootingstar_creation = (rand() % 30);
			if (shootingstar_creation == TRUE)
			{
				map[0][x] = SHOOTINGSTAR;
			}
			break;
		case 4:
			shootingstar_creation = (rand() % 20);
			if (shootingstar_creation == TRUE)
			{
				map[0][x] = SHOOTINGSTAR;
			}

			break;

		}

	}

}

void ShootingStarMove(int map[][WIDTH], int character[], int score[]) //유성 이동
{
	for (int y = HEIGHT; y >= 0; y--)
	{
		for (int x = WIDTH - 1; x >= 0; x--)
		{
			if (map[y][x] == SHOOTINGSTAR)
			{
				if (map[y + 1][x] == CHARACTER)
				{
					character[CHARACTER_STATUS] = DEAD;
					return;
				}
				else if(map[y + 1][x] != CHARACTER && map[y + 1][x] != WALL)
				{
					map[y + 1][x] = SHOOTINGSTAR;
				}
				else if (map[y + 1][x] == WALL)
				{
					score[0]++;
				}
				map[y][x] = NULL;
			}
		}
	}
}

void GameStart(int difficulty[])
{
	int map[HEIGHT][WIDTH] = {
		{ 1,3,3,3,3,3,3,3,3,3,3,3,1 },
		{ 1,0,0,0,0,0,0,0,0,0,0,0,1 },
		{ 1,0,0,0,0,0,0,0,0,0,0,0,1 },
		{ 1,0,0,0,0,0,0,0,0,0,0,0,1 },
		{ 1,0,0,0,0,0,0,0,0,0,0,0,1 },
		{ 1,0,0,0,0,0,0,0,0,0,0,0,1 },
		{ 1,0,0,0,0,0,0,0,0,0,0,0,1 },
		{ 1,0,0,0,0,0,0,0,0,0,0,0,1 },
		{ 1,0,0,0,0,0,0,0,0,0,0,0,1 },
		{ 1,0,0,0,0,0,0,0,0,0,0,0,1 },
		{ 1,0,0,0,0,0,0,0,0,0,0,0,1 },
		{ 1,0,0,0,0,0,0,0,0,0,0,0,1 },
		{ 1,0,0,0,0,0,0,0,0,0,0,0,1 },
		{ 1,0,0,0,0,0,0,0,0,0,0,0,1 },
		{ 1,0,0,0,0,0,2,0,0,0,0,0,1 },
		{ 1,1,1,1,1,1,1,1,1,1,1,1,1 },
	};
	int character[3];
	int shootingstar[2];
	int score[1] = { 0 };
	int speed = 43;
	int speedup = 0;
	Init(map, character);
	while (TRUE)
	{
		if (character[CHARACTER_STATUS] == DEAD)
		{
			printf(" GAME OVER");
			system("pause");
			break;
		}
		system("cls");
		MapDraw(map, score);
		if (kbhit())
		{
			Move(map, character);
		}
		ShootingStarMaker(map, difficulty);
		ShootingStarMove(map, character, score);
		if (score[0] % 100 == 99 && speedup <= 2) //99 스코어 달성 시 유성이동 속도증가 
		{
			speed -= 5;
			speedup++;
		}
		Sleep(speed);
	}
}

void Difficulty(int difficulty[], char difficulty_name[])
{
	int select;
	while (TRUE)
	{
		system("cls");
		printf("=====현재 난이도 : %s====\n", difficulty_name);
		printf("====난이도 조절=====\n");
		printf("1. Easy\n");
		printf("2. Nomal\n");
		printf("3. Hard\n");
		printf("4. Hell\n");
		printf("5. Retun\n");
		printf("입력 : ");
		scanf("%d", &select);
		switch (select)
		{
		case 1:
			difficulty[0] = EASY;
			sprintf(difficulty_name, "%s", "EASY");
			break;
		case 2:
			difficulty[0] = NOMAL;
			sprintf(difficulty_name, "%s", "NOMAL");

			break;
		case 3:
			difficulty[0] = HARD;
			sprintf(difficulty_name, "%s", "HARD");
			break;
		case 4:
			difficulty[0] = HELL;
			sprintf(difficulty_name, "%s", "HELL");
			break;
		case 5:
			return;
		}
	}
}

void main()
{
	srand((unsigned)time(NULL));
	int select;
	char difficulty_name[10] = "EASY";
	int difficulty[1] = { 1 };

	while (1)
	{
		system("cls");
		printf("====별똥별 피하기=====\n");
		printf("\t1. 게임 시작\n");
		printf("\t2. 난이도 조절\n");
		printf("\t3. 종료\n");
		printf("입력 : ");
		scanf("%d", &select);
		switch (select)
		{
		case 1:
			GameStart(difficulty);
			break;
		case 2:
			Difficulty(difficulty, difficulty_name);
			break;
		case 3:
			return;
		}
	}
}

